[{"title":"Deque","type":0,"sectionRef":"#","url":"/deque-luau/api/Deque","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#new","content":"Constructors &lt;/&gt; Deque.new( elements: {T}-- will not be mutated ) → Deque&lt;T&gt; Creates a deque with the provided elements list.  "},{"title":"raw​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#raw","content":"Constructors &lt;/&gt; Deque.raw( elements: {T}-- will be mutated ) → Deque&lt;T&gt; Creates a deque with the provided elements list. This constructor is more efficient if you don't care that the table provided will be mutated as it will not be cloned. If you are unsure what constructor to use then it's safer to use .new instead.  "},{"title":"getElements​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#getElements","content":"Methods &lt;/&gt; Deque.getElements(self: Deque&lt;T&gt;) → {T} Returns all the elements in the deque as an array.  "},{"title":"getLength​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#getLength","content":"Methods &lt;/&gt; Deque.getLength(self: Deque&lt;T&gt;) → number Returns the number of elements in the deque.  "},{"title":"find​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#find","content":"Methods &lt;/&gt; Deque.find( self: Deque&lt;T&gt;, element: T ) → number? Searches for the element in the deque and if found returns its index.  "},{"title":"drain​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#drain","content":"Methods &lt;/&gt; Deque.drain( self: Deque&lt;T&gt;, from: number,-- the starting index of the removal length: number-- how many elements to remove ) → {T} Removes multiple elements from the deque and returns them. The provided combination of from and length cannot fall out of the following bounds [1, deque:getLength()] or an error will occur.  "},{"title":"insert​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#insert","content":"Methods &lt;/&gt; Deque.insert( self: Deque&lt;T&gt;, index: number, element: T ) → () Inserts a new element in the provided index of the deque shifting as few existing elements as possible. The provided index cannot fall out of the following bounds [1, deque:getLength() + 1] or an error will occur.  "},{"title":"remove​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#remove","content":"Methods &lt;/&gt; Deque.remove( self: Deque&lt;T&gt;, index: number ) → T Removes the element at the provided index of the deque while shifting as few existing elements as possible. The provided index cannot fall out of the following bounds [1, queue:getLength()] or an error will occur.  "},{"title":"popBack​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#popBack","content":"Methods &lt;/&gt; Deque.popBack(self: Deque&lt;T&gt;) → T Removes the element at the end of the deque and returns it. If the deque is empty this method will error.  "},{"title":"pushBack​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#pushBack","content":"Methods &lt;/&gt; Deque.pushBack( self: Deque&lt;T&gt;, element: T ) → () Appends the element at the end of the deque.  "},{"title":"popFront​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#popFront","content":"Methods &lt;/&gt; Deque.popFront(self: Deque&lt;T&gt;) → T Removes the element at the front of the deque and returns it. If the deque is empty this method will error.  "},{"title":"pushFront​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#pushFront","content":"Methods &lt;/&gt; Deque.pushFront( self: Deque&lt;T&gt;, element: T ) → () Prepends the element at the front of the deque.  "},{"title":"replace​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#replace","content":"Methods &lt;/&gt; Deque.replace( self: Deque&lt;T&gt;, index: number, element: T ) → () Replaces the element at the index in the deque. The provided index cannot fall out of the following bounds [1, deque:getLength()] or an error will occur.  "},{"title":"swap​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#swap","content":"Methods &lt;/&gt; Deque.swap( self: Deque&lt;T&gt;, i: number,-- the index of element A j: number-- the index of element B ) → () Swaps two elements already in the deque with each other. The provided indices cannot fall out of the following bounds [1, deque:getLength()] or an error will occur.  "},{"title":"rotate​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#rotate","content":"Methods &lt;/&gt; Deque.rotate( self: Deque&lt;T&gt;, n: number ) → () Rotate the deque n steps to the right. If n is negative, rotate to the left. Rotating one step to the right is equivalent to: deque:pushFront(deque:popBack()) Rotating one step to the left is equivalent to: deque:pushBack(deque:popFront())   "},{"title":"reverse​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#reverse","content":"Methods &lt;/&gt; Deque.reverse(self: Deque&lt;T&gt;) → () Reverses the elements of the deque in-place.  "},{"title":"clone​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#clone","content":"Methods &lt;/&gt; Deque.clone(self: Deque&lt;T&gt;) → Deque&lt;T&gt; Creates a shallow copy of the deque.  "},{"title":"clear​","type":1,"pageTitle":"Deque","url":"/deque-luau/api/Deque#clear","content":"Methods &lt;/&gt; Deque.clear(self: Deque&lt;T&gt;) → Deque&lt;T&gt; Remove all elements from the deque leaving it with length 0. "}]