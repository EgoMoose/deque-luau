"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[839],{4838:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a deque with the provided elements list.","params":[{"name":"elements","desc":"will not be mutated","lua_type":"{ T }"}],"returns":[{"desc":"","lua_type":"Deque<T>"}],"function_type":"static","tags":["Constructors"],"source":{"line":32,"path":"src/init.luau"}},{"name":"raw","desc":"Creates a deque with the provided elements list.\\n\\nThis constructor is more efficient if you don\'t care that the table provided will be mutated as it will not be cloned.\\nIf you are unsure what constructor to use then it\'s safer to use `.new` instead.","params":[{"name":"elements","desc":"will be mutated","lua_type":"{ T }"}],"returns":[{"desc":"","lua_type":"Deque<T>"}],"function_type":"static","tags":["Constructors"],"source":{"line":48,"path":"src/init.luau"}},{"name":"getElement","desc":"Returns the element at the provided index. This method will error if the provided index is out of range.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"index","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","tags":["Methods"],"source":{"line":69,"path":"src/init.luau"}},{"name":"getElements","desc":"Returns all the elements in the deque as an array.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"}],"returns":[{"desc":"","lua_type":"{ T }"}],"function_type":"static","tags":["Methods"],"source":{"line":82,"path":"src/init.luau"}},{"name":"getLength","desc":"Returns the number of elements in the deque.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","tags":["Methods"],"source":{"line":96,"path":"src/init.luau"}},{"name":"find","desc":"Searches for the element in the deque and if found returns its index.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"element","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"number?"}],"function_type":"static","tags":["Methods"],"source":{"line":109,"path":"src/init.luau"}},{"name":"drain","desc":"Removes multiple elements from the deque and returns them.\\n\\nThe provided combination of `from` and `length` cannot fall out of the following bounds `[1, deque:getLength()]` or an error will occur.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"from","desc":"the starting index of the removal","lua_type":"number"},{"name":"length","desc":"how many elements to remove","lua_type":"number"}],"returns":[{"desc":"","lua_type":"{ T }"}],"function_type":"static","tags":["Methods"],"source":{"line":131,"path":"src/init.luau"}},{"name":"insert","desc":"Inserts a new element in the provided index of the deque shifting as few existing elements as possible.\\n\\nThe provided index cannot fall out of the following bounds `[1, deque:getLength() + 1]` or an error will occur.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"index","desc":"","lua_type":"number"},{"name":"element","desc":"","lua_type":"T"}],"returns":[],"function_type":"static","tags":["Methods"],"source":{"line":180,"path":"src/init.luau"}},{"name":"remove","desc":"Removes the element at the provided index of the deque while shifting as few existing elements as possible.\\n\\nThe provided index cannot fall out of the following bounds `[1, queue:getLength()]` or an error will occur.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"index","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","tags":["Methods"],"source":{"line":215,"path":"src/init.luau"}},{"name":"popBack","desc":"Removes the element at the end of the deque and returns it.\\n\\nIf the deque is empty this method will error.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","tags":["Methods"],"source":{"line":230,"path":"src/init.luau"}},{"name":"pushBack","desc":"Appends the element at the end of the deque.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"element","desc":"","lua_type":"T"}],"returns":[],"function_type":"static","tags":["Methods"],"source":{"line":243,"path":"src/init.luau"}},{"name":"popFront","desc":"Removes the element at the front of the deque and returns it.\\n\\nIf the deque is empty this method will error.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","tags":["Methods"],"source":{"line":257,"path":"src/init.luau"}},{"name":"pushFront","desc":"Prepends the element at the front of the deque.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"element","desc":"","lua_type":"T"}],"returns":[],"function_type":"static","tags":["Methods"],"source":{"line":270,"path":"src/init.luau"}},{"name":"replace","desc":"Replaces the element at the index in the deque.\\n\\nThe provided index cannot fall out of the following bounds `[1, deque:getLength()]` or an error will occur.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"index","desc":"","lua_type":"number"},{"name":"element","desc":"","lua_type":"T"}],"returns":[],"function_type":"static","tags":["Methods"],"source":{"line":285,"path":"src/init.luau"}},{"name":"swap","desc":"Swaps two elements already in the deque with each other.\\n\\nThe provided indices cannot fall out of the following bounds `[1, deque:getLength()]` or an error will occur.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"i","desc":"the index of element A","lua_type":"number"},{"name":"j","desc":"the index of element B","lua_type":"number"}],"returns":[],"function_type":"static","tags":["Methods"],"source":{"line":301,"path":"src/init.luau"}},{"name":"rotate","desc":"Rotate the deque n steps to the right. If n is negative, rotate to the left.\\n\\nRotating one step to the right is equivalent to:\\n```lua\\ndeque:pushFront(deque:popBack())\\n```\\n\\nRotating one step to the left is equivalent to:\\n```lua\\ndeque:pushBack(deque:popFront())\\n```","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"n","desc":"","lua_type":"number"}],"returns":[],"function_type":"static","tags":["Methods"],"source":{"line":327,"path":"src/init.luau"}},{"name":"reverse","desc":"Reverses the elements of the deque in-place.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"}],"returns":[],"function_type":"static","tags":["Methods"],"source":{"line":345,"path":"src/init.luau"}},{"name":"clone","desc":"Creates a shallow copy of the deque.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"}],"returns":[{"desc":"","lua_type":"Deque<T>"}],"function_type":"static","tags":["Methods"],"source":{"line":365,"path":"src/init.luau"}},{"name":"clear","desc":"Remove all elements from the deque leaving it with length 0.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"}],"returns":[{"desc":"","lua_type":"Deque<T>"}],"function_type":"static","tags":["Methods"],"source":{"line":378,"path":"src/init.luau"}},{"name":"iterate","desc":"Provides an iterator that will travel through all elements of the deque.","params":[{"name":"self","desc":"","lua_type":"Deque<T>"},{"name":"reversed","desc":"if the iterator should travel backwards","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"() -> (number, T)"}],"function_type":"static","tags":["Methods"],"source":{"line":393,"path":"src/init.luau"}}],"properties":[],"types":[],"name":"Deque","desc":"Deques are a generalization of stacks and queues (the name is pronounced \\"deck\\" and is short for \\"double-ended queue\\").","source":{"line":8,"path":"src/init.luau"}}')}}]);